import {
  AfterViewInit,
  Component,
  ElementRef,
  Input,
  OnInit,
  ViewChild,
} from '@angular/core';

import { Service } from './app.service';
import { DxGanttComponent, DxGanttModule } from 'devextreme-angular';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Task } from './models/task';
import { RegisterDevextremeService } from './services/dev-extreme/register-devextreme.service';
import {
  TaskDeletedEvent,
  TaskInsertedEvent,
  TaskUpdatedEvent,
} from 'devextreme/ui/gantt';
import { TasksService } from './services/tasks/tasks.service';

import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { TranslationService } from './services/translate/translation.service';
import { ResizeService } from './services/resize/resize.service';

export function HttpLoaderFactory(http: HttpClient) {
  return new TranslateHttpLoader(http, './assets/i18n/', '.json');
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [DxGanttModule, HttpClientModule, TranslateModule],
  providers: [Service, ResizeService],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent implements OnInit, AfterViewInit {
  @ViewChild(DxGanttComponent, { static: false }) gantt!: DxGanttComponent;
  tasks: Task[] = [];
  apiUrl: string = '';

  constructor(
    private elementRef: ElementRef,
    private service: Service,
    private devExtremeService: RegisterDevextremeService,
    private tasksService: TasksService,
    private translationService: TranslationService,
    private translate: TranslateService,
    private resizeService: ResizeService
  ) {
    this.translate.setDefaultLang('en');
    this.logIframeUrl();
  }
  ngAfterViewInit(): void {
    if (typeof window !== 'undefined') {
      this.gantt.height = window.innerHeight - 50;
    }
    this.resizeService.initResizeService(this.gantt);
  }

  customValue: string = '';

  ngOnInit() {
    this.loadTasks();
    this.registerDevExtremeLicense();
  }
  logIframeUrl() {
    if (typeof window !== 'undefined') {
      const selectedRows =
        window.parent.document.querySelectorAll<HTMLDivElement>(
          '.ag-row-selected'
        );
      const hyperlinks: HTMLAnchorElement[] = [];
      selectedRows.forEach((row) => {
        const links = row.querySelectorAll<HTMLAnchorElement>('a');
        const language = row.querySelectorAll<HTMLAnchorElement>('span');

        language.forEach((lng) => {
          if (lng.innerHTML == 'ENG') {
            this.translationService.setLanguage('en');
          } else {
            this.translationService.setLanguage('nl');
          }
        });

        links.forEach((hyperLink) => {
          if (hyperLink.href.indexOf('index.html') == -1) {
            this.apiUrl = hyperLink.href;
          }
        });
      });
    }
  }

  private registerDevExtremeLicense(): void {
    this.devExtremeService.licenseKey = this.readcustomField(
      'data-custom-dev-extreme-license'
    );
    this.devExtremeService.registerLicense();
  }

  private loadTasks() {
    if (this.apiUrl) {
      this.service.getProductionOrderTasks(this.apiUrl).then((res) => {
        this.tasks = res;
      });
    }

    //this.tasks = this.devExtremeService.getDefaultTasks();
  }

  private readcustomField(customProperty: string): string {
    const hostElement = this.elementRef.nativeElement as HTMLElement;
    return hostElement.getAttribute(customProperty) || '';
  }

  onTaskUpdated(e: TaskUpdatedEvent) {
    let initialObject = this.tasks.find((x) => x.id == e.key);
    if (initialObject) {
      this.tasksService.updateDifferences(initialObject, e.values);
      this.service.updateTaskInDb(this.apiUrl, initialObject).subscribe();
    }
  }

  onTaskInserted(e: TaskInsertedEvent) {
    this.service
      .createTaskInDB(this.apiUrl, e.values)
      .subscribe((result: any) => {
        //because the id is used as a key to Edit/Delte we need set the id of the database instead of the autogenerated GUID
        this.tasks[this.tasks.length - 1].id = result.production_order_id;
      });
    this.gantt.instance.showTaskDetailsDialog(
      this.tasks[this.tasks.length - 1].id
    );
    this.gantt.onTaskEditDialogShowing.emit();
  }

  onTaskDeleted(e: TaskDeletedEvent) {
    this.service.deleteTask(this.apiUrl, e.key).subscribe();
  }
}
